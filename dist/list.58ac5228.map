{"version":3,"sources":["list.js"],"names":["createList","createNode","value","appendList","list","node","x","next","removeFromList","p","data","travelList","fn","node2","node3","node4","newList","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,aAAa,SAAbA,UAAa,QAAQ;AACvB,WAAOC,WAAWC,KAAX,CAAP;AACH,CAFD;;AAIA,IAAMC,aAAa,SAAbA,UAAa,CAACC,IAAD,EAAMF,KAAN,EAAe;AAC9B,QAAMG,OAAOJ,WAAWC,KAAX,CAAb;AACA,QAAII,IAAEF,IAAN;AACA,WAAOE,EAAEC,IAAT,EAAe;AACXD,YAAIA,EAAEC,IAAN;AACH;AACD;AACAD,MAAEC,IAAF,GAASF,IAAT;AACA,WAAOA,IAAP;AACH,CATD;AAUA,IAAMG,iBAAiB,SAAjBA,cAAiB,CAACJ,IAAD,EAAMC,IAAN,EAAa;AAChC,QAAIC,IAAIF,IAAR;AACA,QAAIK,IAAIJ,IAAR;AACA,WAAOC,MAAID,IAAJ,IAAYC,MAAI,IAAvB,EAA4B;AACxBG,YAAIH,CAAJ;AACAA,YAAIA,EAAEC,IAAN;AACH;AACD,QAAGD,MAAM,IAAT,EAAc;AACV;AACA,eAAO,KAAP;AACD,KAHH,MAGQ,IAAGA,MAAMG,CAAT,EAAW;AACf;AACAA,YAAIH,EAAEC,IAAN;AACA,eAAOE,CAAP;AACA;AACD,KALK,MAKD;AACHA,UAAEF,IAAF,GAASD,EAAEC,IAAX;AACA,eAAOH,IAAP;AACA;AACD;AACH;AACI;AACA;AACJ;AACA;AACA;AACI;AACA;AACJ;AACA;AACA;AACQ;AACA;AACR;AACA;AACA;AACA;AAEH,CAtCD;AAuCA,IAAMH,aAAY,SAAZA,UAAY,CAACC,KAAD,EAAS;AACvB,WAAM;AACFQ,cAAMR,KADJ;AAEFK,cAAM;AAFJ,KAAN;AAIH,CALD;;AAOA,IAAMI,aAAa,SAAbA,UAAa,CAACP,IAAD,EAAMQ,EAAN,EAAW;AAC1B,QAAIN,IAAIF,IAAR;AACA,WAAOE,MAAI,IAAX,EAAiB;AACbM,WAAGN,CAAH;AACAA,YAAEA,EAAEC,IAAJ;AACH;AACJ,CAND;;AASA,IAAMH,OAAMJ,WAAW,EAAX,CAAZ;AACA,IAAMK,OAAMD,IAAZ;AACA,IAAMS,QAAOV,WAAWC,IAAX,EAAgB,EAAhB,CAAb;AACA,IAAMU,QAAOX,WAAWC,IAAX,EAAgB,EAAhB,CAAb;AACA,IAAMW,QAAOZ,WAAWC,IAAX,EAAgB,EAAhB,CAAb;AACA,IAAMY,UAASR,eAAeJ,IAAf,EAAqBS,KAArB,CAAf;AACAF,WAAWP,IAAX,EAAgB,gBAAM;AAClBa,YAAQC,GAAR,CAAYb,KAAKK,IAAjB;AACH,CAFD;AAGAF,eAAeJ,IAAf,EAAoBU,KAApB;AACAG,QAAQC,GAAR,CAAYb,IAAZ;AACAY,QAAQC,GAAR,CAAYd,IAAZ","file":"list.58ac5228.map","sourceRoot":"..\\src","sourcesContent":["const createList = value =>{\r\n    return createNode(value);\r\n};\r\n\r\nconst appendList = (list,value) =>{\r\n    const node = createNode(value);\r\n    let x=list;\r\n    while (x.next) {\r\n        x = x.next;\r\n    }\r\n    //x.next === null  x是最后一个节点\r\n    x.next = node;\r\n    return node;\r\n};\r\nconst removeFromList = (list,node)=>{\r\n    let x = list;\r\n    let p = node;\r\n    while (x!==node && x!==null){\r\n        p = x;\r\n        x = x.next;\r\n    }\r\n    if(x === null){ \r\n        // 若 x 为 null，则不需要删除，直接 return， false 表示无法删除不在list里的节点\r\n        return false\r\n      }else if(x === p){ \r\n        // 这说明要删除的节点是第一个节点\r\n        p = x.next\r\n        return p \r\n        // 如果删除的是第一个节点，那么就要把新 list 的头节点 p 返回给外面，即 newList = removeFromList(list, list)\r\n      }else{\r\n        p.next = x.next;\r\n        return list \r\n        // 如果删除的不是第一个节点，返回原来的 list 即可\r\n      }\r\n    //if(list===node){\r\n        //如果删除的是第1个节点\r\n        //list指向第2个节点\r\n    //    list =node.next;\r\n    //}else{\r\n    //    if(list.next ===node){\r\n        //如果删除的是第2个节点\r\n        //第1个节点.next = 第2个节点.next\r\n    //        list.next = node.next\r\n    //    }else{\r\n    //       if(list.next.next ===node){\r\n            //如果删除的是第3个节点\r\n            //第2个节点.next = 第3个节点.next\r\n    //            list.next.next = node.next\r\n    //        }\r\n    //    }\r\n    //}\r\n    \r\n};\r\nconst createNode =(value)=>{\r\n    return{\r\n        data: value,\r\n        next: null \r\n    };\r\n};\r\n\r\nconst travelList = (list,fn)=>{\r\n    let x = list;\r\n    while( x!==null ){\r\n        fn(x)\r\n        x=x.next\r\n    }\r\n}\r\n\r\n\r\nconst list =createList(10)\r\nconst node =list;\r\nconst node2 =appendList(list,20)\r\nconst node3 =appendList(list,30)\r\nconst node4 =appendList(list,40)\r\nconst newList =removeFromList(list, node2)\r\ntravelList(list,node=>{\r\n    console.log(node.data);\r\n});\r\nremoveFromList(list,node3);\r\nconsole.log(node)\r\nconsole.log(list)\r\n"]}