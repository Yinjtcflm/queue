{"version":3,"sources":["tree.js"],"names":["createTree","value","data","children","parent","addChild","node","newNode","push","travel","tree","fn","i","length","removeNode","siblings","index","splice","node2","node3","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,aAAY,SAAZA,UAAY,CAACC,KAAD,EAAS;AACvB,WAAO;AACHC,cAAKD,KADF;AAEHE,kBAAS,IAFN;AAGHC,gBAAO;AAHJ,KAAP;AAKH,CAND;;AAQA,IAAMC,WAAU,SAAVA,QAAU,CAACC,IAAD,EAAML,KAAN,EAAc;AAC1B,QAAMM,UAAS;AACXL,cAAKD,KADM;AAEXE,kBAAS,IAFE;AAGXC,gBAAOE;AAHI,KAAf;AAKAA,SAAKH,QAAL,GAAeG,KAAKH,QAAL,IAAiB,EAAhC;AACAG,SAAKH,QAAL,CAAcK,IAAd,CAAmBD,OAAnB;AACA,WAAOA,OAAP;AACH,CATD;;AAWA,IAAME,SAAQ,SAARA,MAAQ,CAACC,IAAD,EAAMT,KAAN,EAAc;AACxBU,OAAGD,IAAH;AACA,QAAG,CAACA,KAAKP,QAAT,EAAkB;AACd;AACH;AACD,SAAI,IAAIS,IAAE,CAAV,EAAYA,IAAEF,KAAKP,QAAL,CAAcU,MAA5B,EAAmCD,GAAnC,EAAuC;AACnCH,eAAOC,KAAKP,QAAL,CAAcS,CAAd,CAAP,EAAwBD,EAAxB;AACH;AACJ,CARD;;AAUA,IAAMG,aAAY,SAAZA,UAAY,CAACJ,IAAD,EAAMJ,IAAN,EAAa;AAC3B,QAAMS,WAAWT,KAAKF,MAAL,CAAYD,QAA7B;AACA,QAAIa,QAAO,CAAX;AACA,SAAI,IAAIJ,IAAE,CAAV,EAAYA,IAAIG,SAASF,MAAzB,EAAgCD,GAAhC,EAAoC;AAChC,YAAGG,SAASH,CAAT,MAAcN,IAAjB,EAAsB;AAClBU,oBAAMJ,CAAN;AACH;AACJ;AACDG,aAASE,MAAT,CAAgBD,KAAhB,EAAsB,CAAtB;AACH,CATD;;AAWA,IAAMN,OAAOV,WAAW,EAAX,CAAb;AACA,IAAMkB,QAAQb,SAASK,IAAT,EAAc,EAAd,CAAd;AACA,IAAMS,QAAQd,SAASK,IAAT,EAAc,EAAd,CAAd;AACAL,SAASK,IAAT,EAAc,EAAd;AACAL,SAASK,IAAT,EAAc,EAAd;AACAL,SAASa,KAAT,EAAe,GAAf;AACAb,SAASa,KAAT,EAAe,GAAf;AACAE,QAAQC,GAAR,CAAYX,IAAZ;;AAEA,IAAMC,KAAK,SAALA,EAAK,OAAO;AACdS,YAAQC,GAAR,CAAYf,KAAKJ,IAAjB;AACH,CAFD;AAGA;AACAY,WAAWJ,IAAX,EAAgBS,KAAhB;AACAC,QAAQC,GAAR,CAAYX,IAAZ","file":"tree.1db12e76.map","sourceRoot":"..\\src","sourcesContent":["const createTree =(value)=>{\r\n    return {\r\n        data:value,\r\n        children:null,\r\n        parent:null\r\n    };\r\n};\r\n\r\nconst addChild =(node,value)=>{\r\n    const newNode ={\r\n        data:value,\r\n        children:null,\r\n        parent:node\r\n    };\r\n    node.children =node.children || [];\r\n    node.children.push(newNode);\r\n    return newNode;\r\n}\r\n\r\nconst travel =(tree,value)=>{\r\n    fn(tree)\r\n    if(!tree.children){\r\n        return;\r\n    }\r\n    for(let i=0;i<tree.children.length;i++){\r\n        travel(tree.children[i],fn)\r\n    }\r\n};\r\n\r\nconst removeNode =(tree,node)=>{\r\n    const siblings = node.parent.children;\r\n    let index =0;\r\n    for(let i=1;i < siblings.length;i++){\r\n        if(siblings[i]===node){\r\n            index=i;\r\n        }\r\n    }\r\n    siblings.splice(index,1);\r\n}\r\n\r\nconst tree = createTree(10);\r\nconst node2 = addChild(tree,20);\r\nconst node3 = addChild(tree,30);\r\naddChild(tree,40);\r\naddChild(tree,50);\r\naddChild(node2,201);\r\naddChild(node2,202);\r\nconsole.log(tree)\r\n\r\nconst fn = node =>{\r\n    console.log(node.data)\r\n};\r\n//travel(tree,fn);\r\nremoveNode(tree,node3)\r\nconsole.log(tree)"]}